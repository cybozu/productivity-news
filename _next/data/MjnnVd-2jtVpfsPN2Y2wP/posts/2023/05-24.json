{"pageProps":{"post":{"title":"#9 - 2023.05.24","year":"2023","slug":"05-24","content":"<h2><a href=\"https://zenn.dev/tmknom/articles/github-apps-token\">GitHub Appsトークン解体新書：GitHub ActionsからPATを駆逐する技術</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/ganta0087\">@ganta0087</a></p>\n<ul>\n<li>GitHub APIを使った自動化を行う際にPAT(Personal Access Token)ではなく、GitHub Appを使ったIAT(Installation Access Token)を使うことをオススメする内容です。</li>\n<li>GitHub Appの設定からIATの生成までを詳しく解説しています。</li>\n<li>関連\n<ul>\n<li><a href=\"https://github.com/cybozu/octoken-action\">https://github.com/cybozu/octoken-action</a></li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://github.blog/changelog/2023-05-04-github-actions-all-actions-will-run-on-node16-instead-of-node12/\">GitHub Actions: All Actions will run on Node16 instead of Node12 | GitHub Changelog</a></h2>\n<p>共有担当: <a href=\"https://github.com/korosuke613\">@korosuke613</a></p>\n<ul>\n<li><a href=\"https://github.blog/changelog/2022-09-22-github-actions-all-actions-will-begin-running-on-node16-instead-of-node12/\">以前より告知されていた</a>通り、GitHub Actions において、5/18 より GitHub Actions で動作する全ての JavaScript アクションは Node.js v16 で動作するようになります</li>\n<li>5/18 以降は <code>node12</code> を指定しても Node.js v16 で動作するようになります\n<ul>\n<li>元々 JavaScript アクションで指定できる Node.js のバージョンは v12 のみでした(<code>node12</code>)が、一昨年末から Node.js v16 も指定できるようになりました(<code>node16</code>)<sup><a href=\"#user-content-fn-node16\" id=\"user-content-fnref-node16\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup><sup><a href=\"#user-content-fn-actions_can\" id=\"user-content-fnref-actions_can\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup></li>\n<li>もとより Node.js v12 自体は 2022 年 4 月にサポートが終了しています</li>\n</ul>\n</li>\n<li>JavaScript アクションを開発している方でまだ <code>node12</code> を指定している方は <code>node16</code> でも動くようにアクションを更新しましょう\n<ul>\n<li>そういや <a href=\"https://nodejs.org/en/blog/announcements/nodejs16-eol\">Node.js 16 は 2023 年 9 月にサポート終了予定</a>ですが、まだ <code>node18</code> は出ていませんね</li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://github.blog/changelog/2023-04-17-introducing-repository-rules-public-beta/\">Introducing Repository Rules Public Beta | GitHub Changelog</a></h2>\n<p>共有担当: <a href=\"https://github.com/korosuke613\">@korosuke613</a></p>\n<ul>\n<li>GitHub においてブランチ保護を今後置き換えそうな機能、Repository Rules が public beta になりました</li>\n<li>branch protection rules や protected tags よりも柔軟に、そして強力に保護をかけることが可能です。また、GitHub Enterprise Cloud の顧客であれば Organization 全体でルールを適用できます</li>\n<li>また、従来の branch protection rules でできたような設定の他に、コミット名やブランチ名にも制限をかけることができるため、conventional commit を強制するなんてことも可能です\n<ul>\n<li>ただし GHEC のみ</li>\n</ul>\n</li>\n<li>実際に使ってみてどんな感じだったかをスクラップに書いています。どんな感じか興味ある方は読んでみてください\n<ul>\n<li><a href=\"https://zenn.dev/korosuke613/scraps/84794d9baed038\">GitHub の Repository Rules を試してみる</a></li>\n</ul>\n</li>\n<li>特に嬉しいのはやっぱり GHEC 契約者ですかね\n<ul>\n<li>ブランチやタグの保護を Organization で共通化できるのは嬉しいです</li>\n<li>ルールをいきなり適用するのではなく、現状ルールに違反しているアクションがあるかどうかなどをチェックできる Evaluate モードがあるのが組織向けでいいですね</li>\n</ul>\n</li>\n<li>活用していきたいです</li>\n</ul>\n<h2><a href=\"https://github.blog/changelog/2023-04-19-npm-provenance-public-beta/\">npm provenance public beta | GitHub Changelog</a></h2>\n<p>共有担当: <a href=\"https://github.com/korosuke613\">@korosuke613</a></p>\n<ul>\n<li>npm registry において、npm パッケージがどこで何をソースに作られたかを意味する provenance を付与した状態で npm registry にパッケージを公開できるようになりました（public beta）\n<ul>\n<li>provenance 自体は起源とか由来っていう意味らしいですが、個人的には出自とか血統証明書って考える方がしっくりきました\n<ul>\n<li><a href=\"https://twitter.com/gorohash/status/1651239846730686464\">「『出自』とか？」</a></li>\n<li><a href=\"https://twitter.com/Shitimi_613/status/1651396096630095872\">「現実のものだと『血統証明書』って考えるとわかりやすいかも」</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>OIDC を使って provenance に当たる情報を Sigstore のサーバに送り、返ってくる署名の証明書をパッケージと一緒にレジストリに送るという仕組みらしいです</li>\n<li>GitHub Actions が対応しているということで、サンプルのワークフローが載っています\n<ul>\n<li>おそらく OIDC 対応してる CI/CD サービスなら対応できると思うのですが、現状 GitHub Actions 以外はどこまで対応してそうなのかは分かりませんでした\n<ul>\n<li>誰か調べてほしい</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>方法としては OIDC を使えるようにして <code>npm publish</code> に <code>--provenance</code> をつけるだけでできるので、割と簡単です</li>\n<li>実際に試してみました\n<ul>\n<li>リポジトリ: <a href=\"https://github.com/korosuke613/demo-release-please-for-npm\">korosuke613/demo-release-please-for-npm</a></li>\n<li>npm: <a href=\"https://www.npmjs.com/package/demo-release-please-for-npm\">demo-release-please-for-npm</a></li>\n<li>行った変更\n<ul>\n<li><a href=\"https://github.com/korosuke613/demo-release-please-for-npm/commit/fc87557511c732a08fefc2b065399f11f18ec348\">ci: describe provenance in npm</a>: <code>--provenance</code> の付与</li>\n<li><a href=\"https://github.com/korosuke613/demo-release-please-for-npm/commit/c647918ca80f6ade1c586d96778bb90ab265d30d\">ci: fix release permissions</a>: ワークフローの <code>permissions.id-token</code> で <code>write</code> を指定し忘れたので修正</li>\n<li><a href=\"https://github.com/korosuke613/demo-release-please-for-npm/commit/d59303346be26740c8a6c5b217fbc414cb79a9af\">ci: fix release provenance</a>: <code>package.json</code> の <code>repository.url</code> にリポジトリ url を指定する必要があったので修正</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>パッケージのページには次の情報が載ります\n<ul>\n<li>ビルドサマリーのページへのリンク (<code>View build summary</code>)</li>\n<li>ビルド時のコミットへのリンク (<code>Source Commit</code>)</li>\n<li>ビルドに使ったワークフローファイルへのリンク (<code>Build File</code>)</li>\n<li>rekor という Sigstore の情報を見るサイト（？）(<code>Public Ledger</code>)</li>\n</ul>\n</li>\n<li>簡単に血統証明書を残すことができるので、とりあえず設定してみても良いかと思います。気になる人は試してみてください</li>\n</ul>\n<h2><a href=\"https://github.blog/changelog/2023-05-09-more-secure-private-attachments/\">More secure private attachments | GitHub Changelog</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/miyajan\">@miyajan</a></p>\n<ul>\n<li>これまで、GitHub の private (internal) リポジトリでは、issue や PR などに添付された画像や動画は、URL を知っていれば認証なしでアクセス可能でした</li>\n<li>これからは、private リポジトリに添付された画像や動画を閲覧するにはログインが必要になります\n<ul>\n<li>過去の画像にこの変更は適用されないので注意</li>\n</ul>\n</li>\n<li>認証の仕組みは GitHub のサービス本体とは少し違うので注意\n<ul>\n<li>ためしに private リポジトリで添付画像を含むページを開くと、添付画像の URL（<code>private-user-images.githubusercontent.com</code> ドメイン）は、<code>jwt</code> パラメータが含まれることが確認できます</li>\n<li>この <code>jwt</code> パラメータが認証情報として使われます</li>\n<li>つまり、<code>jwt</code> パラメータを含む URL を共有してしまうと、誰でも見られるので注意</li>\n<li>ただし、JWT の有効期限は 5 分なので、URL が流出しても永続的に見られるわけではないです</li>\n</ul>\n</li>\n<li>これまで業務で画像とか貼りづらかった問題が解消されて、とてもよいですね！</li>\n</ul>\n<h2><a href=\"https://github.blog/changelog/2023-03-28-generate-an-sbom-from-the-dependency-graph/\">Generate an SBOM from the dependency graph</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/defaultcf\">@defaultcf</a></p>\n<ul>\n<li>GitHub で <a href=\"https://spdx.github.io/spdx-spec/v2.3/\">SPDX 2.3</a> に準拠した SBOM（Software bill of materials）をエクスポートできるようになりました。</li>\n<li>利用方法\n<ul>\n<li>Dependency graph のページからダウンロードできます。</li>\n<li>gh CLI の拡張として <a href=\"https://github.com/advanced-security/gh-sbom\">gh-sbom</a> が使えます。</li>\n<li>GitHub Action として <a href=\"https://github.com/marketplace/actions/sbom-generator-action\">advanced-security/sbom-generator-action</a> が使えます。</li>\n<li>REST API のエンドポイント <a href=\"https://docs.github.com/ja/rest/dependency-graph/sboms?apiVersion=2022-11-28\">repos/OWNER/REPO/dependency-graph/sbom</a> で SBOM をダウンロードできます。</li>\n</ul>\n</li>\n<li>昨今のサプライチェーン攻撃に対応したり、ライセンスを確認したりするのに便利そうです。</li>\n</ul>\n<h2><a href=\"https://github.blog/changelog/2023-03-28-updates-to-the-repository-dependency-graph-view/\">Updates to the repository dependency graph view</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/defaultcf\">@defaultcf</a></p>\n<ul>\n<li>Dependency Graph がアップデートされました。\n<ul>\n<li>パッケージ名で検索できるようになりました。</li>\n<li>ライセンスが表示されるようになりました。</li>\n<li>Dependabot による脆弱性検出結果が分かりやすく表示されるようになり、またプルリクに飛ぶことができるようになりました。</li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://github.blog/changelog/2023-03-24-github-actions-the-setup-go-action-now-enables-caching-by-default/\">GitHub Actions: The setup-go Action now enables caching by default</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/defaultcf\">@defaultcf</a></p>\n<ul>\n<li><a href=\"https://github.com/marketplace/actions/setup-go-environment\">actions/setup-go</a> で v4 がリリースされ、キャッシュがデフォルトで有効になりました。\n<ul>\n<li>デフォルトで有効なので、意図的にキャッシュしたくない場合は明示的に <code>cahce: false</code> を指定する必要があります。</li>\n</ul>\n</li>\n<li>依存関係が100MBを超えるリポジトリでは、ビルド時間が20~40%削減できたそうです。</li>\n<li>actions/cache などでキャッシュする必要が無くなり、ジョブをよりシンプルに書けるようになったのは嬉しいですね。</li>\n</ul>\n<h2><a href=\"https://www.publickey1.jp/blog/23/aislackslack_gpt.html\">Slack、さまざまなAIをSlackに統合する「Slack GPT」発表。未読スレッドの要約、顧客ごとのメール提案など多機能を提供</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/naotama\">@naotama</a></p>\n<ul>\n<li>未読メッセージ群のサマライズ: 未読メッセージを要約してくれる機能です。Slackをコミュニケーションの中心に置いている現場で、未読メッセージに埋もれている方にとって、未読メッセージをざっと理解できると、時間コストが圧縮できて良さそうです。メンションだけちゃん見るかという運用できそうな予感。メンション地獄な場合はルールを作ってみると良いかもしれません。\n<ul>\n<li>要約したメッセージに対して <a href=\"https://cybozu.slack.com/apps/A04KGS7N9A8-claude?tab=more_info\">Claude</a> を利用して自然言語で質問することができます。Claude を Slack に組み込んでいると、関連するメッセージを記憶（学習）してくれます。</li>\n<li>要約機能は、Saleforce の <a href=\"https://www.salesforce.com/jp/company/news-press/press-releases/2023/03/230309/\">Einstein GPT</a> を利用して実現されています。</li>\n<li>Slack上のメッセージは、Slack(Salesforce) に預けている状態のため、Slack(Salesforce) 自身がこのような機能を提供してくれると、セキュリティの面で、企業内での利用は推進されそうです。</li>\n</ul>\n</li>\n<li>社内で ChatGPT/OpenAI AI GPT を利用する関連で、<a href=\"https://developers.prtimes.jp/2023/04/05/use-chatbot-ui/\">Chatbot-ui で ChatGPT を社内利用できるようにしました</a> というものがあります。<a href=\"https://openai.com/policies/terms-of-use\">OpenAI API 規約</a>に基づいて、社内利用し易くしようという取り組みです。生産性をあげるツールとして社内で利用したい...という際に、検討してみると良いと思います。\n<ul>\n<li>利用ソフトはこれ -> <a href=\"https://github.com/mckaywrigley/chatbot-ui\">Chatbot-ui</a></li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://aws.amazon.com/jp/blogs/news/amazon-codewhisperer-free-for-individual-use-is-now-generally-available/\">個人で無料で使用できる Amazon CodeWhisperer が一般公開されました</a></h2>\n<p>共有担当: <a href=\"https://zenn.dev/takamin55\">@takamin55</a></p>\n<ul>\n<li>Amazon CodeWhispererがGAになりました</li>\n<li>AWSが提供するAIコーディング支援サービスです\n<ul>\n<li>大きく3つの機能があります\n<ul>\n<li>1.コード生成\n<ul>\n<li>関数名から処理コードを提案、コメントから処理コードを提案、既存の関数からユニットテストを提案などを行える</li>\n<li>サポート言語（精度高め）: Java,Python,JavaScript,TypeScript,C#</li>\n<li>その他言語：Ruby,Go,PHP,C++,C,Shell,Scala,Rust,Kotlin,SQL</li>\n</ul>\n</li>\n<li>2.生成したコードのリファレンス提供</li>\n<li>3.セキュリティスキャン</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>価格は個人向けは無料となっており、AWSアカウントを持っていなくても使えるので導入ハードルは低く、AIコーディング支援のお試しに丁度良いですね。</li>\n<li>試してみたZennがあるので、よければ見てください\n<ul>\n<li><a href=\"https://zenn.dev/takamin55/articles/977a738b1161df\">https://zenn.dev/takamin55/articles/977a738b1161df</a></li>\n</ul>\n</li>\n<li>以下の記事も参考になります\n<ul>\n<li><a href=\"https://aws.amazon.com/jp/blogs/news/10-ways-to-build-applications-faster-with-amazon-codewhisperer/\">Amazon CodeWhisperer でアプリケーションをより速く構築する10の方法</a>\n<ul>\n<li>「コードからコメントを生成する（docs）」という逆の使い方もあって面白い</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>We are hiring</h1>\n<a href=\"https://note.com/cybozu_dev/n/n1c1b44bf72f6\">\n<img src=\"https://user-images.githubusercontent.com/471182/156986297-b189ef3d-98d3-4490-af5c-007a4ab47e5e.png\" alt=\"サイボウズの開発者の生産性を上げる「生産性向上チーム」とは！？\" width=\"600\">\n</a>\n<section data-footnotes class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-node16\">\n<p><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220216#javascript-actions%E3%82%92node16%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%99%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B---kengo&#x27;s-blog\">JavaScript Actionsをnode16で動かすようにする - Kengo's blog</a> <a href=\"#user-content-fnref-node16\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n<li id=\"user-content-fn-actions_can\">\n<p><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220525#actions-can-now-run-in-a-node.js-16-runtime-%7C-github-changelog\">Actions can now run in a Node.js 16 runtime | GitHub Changelog</a> <a href=\"#user-content-fnref-actions_can\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n</ol>\n</section>\n"}},"__N_SSG":true}