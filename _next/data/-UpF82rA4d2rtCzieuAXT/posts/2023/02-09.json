{"pageProps":{"post":{"title":"#6 - 2023.02.09","year":"2023","slug":"02-09","content":"<h2><a href=\"https://cybozu.connpass.com/event/268442/\">Cybozu Productivity Weekly 100 回記念</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/miyajan\">@miyajan</a></p>\n<ul>\n<li>生産性向上チームの<a href=\"https://twitter.com/shitimi_613\">平木場さん</a>が毎週 Zenn に投稿している <a href=\"https://zenn.dev/topics/productivityweekly?order=latest\">Productivity Weekly</a> の記事が第 100 回を迎えたので、記念イベントを開催しました🎉</li>\n<li><a href=\"https://www.docswell.com/s/korosuke613/K11X3K-2023-01-25-productivity-weekly-100th-kinen\">Productivity Weekly 100回記念 🎉\u000b〜この2年のふりかえりとか色々〜</a></li>\n<li>参加者のみなさま、お祝いいただきありがとうございました🙏</li>\n</ul>\n<h2><a href=\"https://www.deepl.com/ja/blog/introducing-deepl-write\">文章作成の頼れるアシスタント、AI搭載のDeepL Writeが新登場</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/miyajan\">@miyajan</a></p>\n<ul>\n<li>文法の間違いを修正するだけでなく、言い回しなども提案してくれます</li>\n<li>ベータ版、無料</li>\n<li><a href=\"https://www.deepl.com/ja/privacy\">DeepLの個人情報保護方針</a>によると、DeepL Pro でログインしているユーザーは、DeepL と同様に、DeepL Write で入力したテキストは保存されず学習にも使われないようです</li>\n</ul>\n<h2><a href=\"https://aws.amazon.com/jp/blogs/news/introducing-finch-an-open-source-client-for-container-development/\">コンテナ開発用のオープンソースクライアント「Finch」のご紹介 | Amazon Web Services ブログ</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/ganta0087\">@ganta0087</a></p>\n<ul>\n<li>Amazonがコンテナ開発用のOSSをリリース\n<ul>\n<li><a href=\"https://github.com/runfinch\">https://github.com/runfinch</a></li>\n<li>ライセンスはApache License 2.0</li>\n</ul>\n</li>\n<li>内部ではLima、nerdctl、containerd、BuildKitを利用し、それらをラップするmacOSネイティブのクライアントを提供</li>\n<li>FinchをAWSのサービスと併用する際に、AWSのサポートプランに基づいてサポートを受けられる</li>\n<li><code>finch</code>コマンドでVMを作成してその上でコンテナの実行などを行う</li>\n<li><code>finch</code>コマンドはnerdctlとも統合されており、Docker CLIライクな操作ができる</li>\n<li>フィードバックを得るために基本的な機能しか実装されていない段階でリリースされている\n<ul>\n<li>今後Windows、Linuxへの対応や性能向上などが予定されている</li>\n<li><a href=\"https://github.com/runfinch/finch/blob/v0.3.0/pkg/config/config.go#L30-L38\">設定もまだVMのCPUとメモリ、ホームディレクトリ以外のマウントパスの追加しか対応していない</a></li>\n<li><a href=\"https://github.com/runfinch/finch/blob/v0.3.0/go.mod#L8\">Virtualization Frameworkに対応しているバージョンのLimaを使っている</a>が、VMのオプションも設定できないためQEMUが使われる</li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://blog.1password.com/shell-plugins/\">Unlock any CLI using Biometrics with 1Password Shell Plugins | 1Password</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/ganta0087\">@ganta0087</a></p>\n<ul>\n<li>1Password CLIのShell Pluginによる各種CLIへシークレットを渡すしくみの紹介</li>\n<li>例えば、GitHub CLIで利用するパーソナルアクセストークンを1Passwordに保存しておき、<code>gh</code>コマンド実行時にそれを参照するようにできる\n<ul>\n<li>GitHub CLI側でOAuthトークンも対応しているが、トークンを安全に保存しておきたい場合や、OAuthのスコープ外のAPIを使いたくてPATを使うときに有用</li>\n</ul>\n</li>\n<li><code>op plugin list</code>で対応ツールが一覧できる\n<ul>\n<li>GitHubの他にAWS、CircleCI、MySQLやPostgreSQLなども対応している</li>\n<li><a href=\"https://developer.1password.com/docs/cli/shell-plugins/aws/#optional-set-up-multi-factor-authentication\">AWS CLIの場合はOTPにも対応</a>している</li>\n</ul>\n</li>\n<li>原理としては、ユーザーがシェル起動時にプラグイン用のスクリプトを読むように設定、そのスクリプト内で元のコマンドで1Password CLIへのエイリアスを張っている\n<ul>\n<li>例: <code>alias gh=\"op plugin run -- gh\"</code></li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://aws.amazon.com/jp/about-aws/whats-new/2022/10/amazon-virtual-private-cloud-vpc-transfer-elastic-ip-addresses-between-aws-accounts/\">Amazon Virtual Private Cloud (VPC) は AWS アカウント間の Elastic IP アドレス転送のサポートを開始</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/defaultcf\">@defaultcf</a></p>\n<ul>\n<li>今まで AWS アカウント間で Elastic IP アドレスを転送するには、転送する側と受け取る側それぞれでサポートに依頼する必要がありました\n<ul>\n<li><a href=\"https://stackoverflow.com/a/62644793\">https://stackoverflow.com/a/62644793</a></li>\n</ul>\n</li>\n<li>または Elastic IP アドレスを新しく割り当てることになり、ファイアウォールなどに新しく登録する手間などがありました</li>\n<li>今後はサポートへの連絡は不要で、次の手順でアカウント間の Elastic IP アドレスの移行が可能です\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro\">https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro</a></li>\n</ul>\n</li>\n<li>注意！\n<ul>\n<li>Elastic IP アドレスは同じ AWS リージョン内にしか転送できません</li>\n<li>7時間以内に転送先の AWS アカウントで Elastic IP アドレスの転送を受け入れなければ、Elastic IP アドレスは元のアカウントの所有に戻ります</li>\n<li>転送後、その Elastic IP アドレスに関連付けられたタグは削除されます</li>\n</ul>\n</li>\n<li>意外とアカウント間の Elastic IP アドレス転送は需要が高い気がするので、ありがたく使っていきましょう</li>\n</ul>\n<h2><a href=\"https://www.publickey1.jp/blog/22/awsidecicdamazon_codecatalystaws_reinvent_2022.html\">AWS上で開発環境一式、フレームワーク、初期コード、IDE、ビルド環境、CI/CDなど提供する「Amazon CodeCatalyst」発表</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/defaultcf\">@defaultcf</a></p>\n<ul>\n<li>無料枠があり、次の範囲で利用可能です（参考: <a href=\"https://codecatalyst.aws/explore/pricing\">https://codecatalyst.aws/explore/pricing</a> ）\n<ul>\n<li>1月1スペースあたり2,000分のビルド時間</li>\n<li>マシンスペックは 2 vCPU/4GB (Linux only)</li>\n<li>開発に使える時間は60時間</li>\n<li>ストレージは64GB</li>\n</ul>\n</li>\n<li>現在のところ、米国西部(オレゴン) us-west-2 リージョンしかサポートされていません</li>\n<li>プロジェクト作成してみました\n<ul>\n<li><a href=\"https://codecatalyst.aws/explore\">codecatalyst.aws</a> からアカウントを作成し、既存の AWS アカウントと紐付けることで環境を作成できます\n<ul>\n<li>AWS アカウント ID を入力し、verify のリンクがクリックすると AWS Console に遷移するので、そこで accept をクリックすると紐付けが完了します</li>\n</ul>\n</li>\n<li>プロジェクト作成時にロールを割り当てます\n<ul>\n<li>数クリックでロール作成と必要な権限の付与が完了します</li>\n<li>プロジェクト作成時に Amazon Catalyst がどのような権限を要求するのかが表示されるので、安心できます</li>\n</ul>\n</li>\n<li>Web IDE はデフォルトで Cloud9 ですが、他に Visual Studio Code, Intellij IDEA Ultimate, GoLand, PyCharm Professional が選択可能です</li>\n<li>ソースコードは CodeCatalyst でホストできる他、GitHub, Jira Software 上のリポジトリのものを使用できます</li>\n</ul>\n</li>\n<li>CI/CD をプロジェクト上で実行できます\n<ul>\n<li>CI/CD のワークフローの定義は独自のスキーマのようで、学習コストがかかりそうです\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/codecatalyst/latest/userguide/flows.html\">https://docs.aws.amazon.com/codecatalyst/latest/userguide/flows.html</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>GitHub Codespaces といい勝負になりそうな感じがしています\n<ul>\n<li>エディタの機能差は見つけられませんでした</li>\n<li>CI/CD について、\n<ul>\n<li>GitHub Codespaces なら Actions を使えば良いので資産がそのまま活かせます</li>\n<li>Amazon CodeCatalyst の場合、新しいスキーマでワークフローを構築する必要があるので多少学習コストがかかりそうです</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://aws.amazon.com/jp/blogs/compute/node-js-18-x-runtime-now-available-in-aws-lambda/\">Node.js 18.x runtime now available in AWS Lambda | AWS Compute Blog</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/defaultcf\">@defaultcf</a></p>\n<ul>\n<li>AWS Lambda で Node.js 18.x が使えるようになりました</li>\n<li>Graviton2 プロセッサなら最大34%性能向上が見込めるそうです</li>\n<li>AWS Lambda の Node.js 18 のランタイムには AWS SDK v3 が同梱されています</li>\n<li>Node.js 18.x でどのような変更が入ったかまとめてみました\n<ul>\n<li>fetch 関数がフラグ無しに使えるようになりました\n<ul>\n<li>ただし Experimental のため注意</li>\n</ul>\n</li>\n<li>class fields と private class methods が使えるようになりました</li>\n<li>他に JSON import assertions, Test Runner module, Web Streams API が使えるようになりました</li>\n</ul>\n</li>\n<li>パフォーマンスは向上し、使えるようになった機能も増えましたので、この機会に是非アップデートしましょう\n<ul>\n<li>何より、Node.js 16.x の EOL が 2023-09-11 に迫っています...</li>\n<li><a href=\"https://github.com/nodejs/release#release-schedule\">https://github.com/nodejs/release#release-schedule</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>We are hiring</h1>\n<a href=\"https://note.com/cybozu_dev/n/n1c1b44bf72f6\">\n<img src=\"https://user-images.githubusercontent.com/471182/156986297-b189ef3d-98d3-4490-af5c-007a4ab47e5e.png\" alt=\"サイボウズの開発者の生産性を上げる「生産性向上チーム」とは！？\" width=\"600\">\n</a>\n"}},"__N_SSG":true}