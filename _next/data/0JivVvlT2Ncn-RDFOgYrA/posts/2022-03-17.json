{"pageProps":{"post":{"title":"#1 - 2022.03.17","slug":"2022-03-17","content":"<h2><a href=\"https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/\">GitHubのMarkdownでMermaid.jsの記法でダイアログが書けるようになりました</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/miyajan\">@miyajan</a></p>\n<ul>\n<li>GitHub でダイアグラムを as code として管理できるようになりました</li>\n<li>Mermaid は JavaScript ベースで Markdown にインスパイアされたダイアグラムやチャートなどを生成するツールです\n<ul>\n<li><a href=\"https://mermaid-js.github.io/mermaid/#/README\">About Mermaid</a></li>\n<li><a href=\"https://mermaid.live/\">Live Editor</a></li>\n<li>OSS だと k8s の公式ドキュメントで使われていたりします\n<ul>\n<li><a href=\"https://kubernetes.io/docs/concepts/services-networking/ingress/#what-is-ingress\">Ingress の図の例</a></li>\n<li><a href=\"https://kubernetes.io/docs/contribute/style/diagram-guide/\">Diagram Guide</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://zenn.dev/yasuhiroki/articles/dd0feae790ba41\">GitHubで使えるようになった Mermaid の便利なところ</a></li>\n</ul>\n<h2><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220216#javascript-actions%E3%82%92node16%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%99%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B---kengo&#x27;s-blog\">GitHub Actions において JavaScript action で node16 が使えるようになってた</a></h2>\n<p>共有担当: <a href=\"https://github.com/korosuke613\">@korosuke613</a></p>\n<p>GitHub Actions のアクションの種類の一つに JavaScript action があります。あらかじめ設定しておいた任意の JS を <code>jobs.&#x3C;job_id>.steps[*].uses</code> から呼び出せるというものなのですが、これまでは実行ランタイムが Node.js の v12 系しか選択できませんでした。しかし、去年末より Node.js 16 が JavaScript action で利用できるようになっていました。これにより、13[^sindo-13], 14[^sindo-14], 15[^sindo-15], 16[^sindo-16] 系の機能（Optional chaining、AbortController など）が JavaScript action において利用できるようになりました。</p>\n<p>actions.yaml の <code>runs.using</code> で <code>node16</code> を指定することでその JavaScript action が Node.js 16 で動きます（<a href=\"https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runsusing\">参考</a>）。ちなみに、現在指定できるのは <code>node12</code> と <code>node16</code> のみです。Node.js 14 (<code>node14</code>)は指定できません。</p>\n<p>Node.js 12 は 2022/04/30 でサポートが終了する予定なので、それに備えた対応と言えます。サポートが切れた途端に Node.js 12 を指定した JavaScript action が使えなくなるということは無いと思いますが、JavaScript action 開発者はサポート終了に備えて早めに Node.js 16 に上げる対応をしておくことをお勧めします[^github-node12]。ちなみに、公式アクションで知られる <a href=\"https://github.com/actions/checkout/releases/tag/v3.0.0\">actions/checkout</a> や <a href=\"https://github.com/actions/setup-node/releases/tag/v3.0.0\">actions/setup-node</a> などの actions 配下のアクションは最近軒並み <code>node16</code> へ変更されていました。</p>\n<p>[^sindo-13]: 参考 <a href=\"https://shisama.hatenablog.com/entry/2019/10/23/190842\">Node.js v13の主な変更点 - 別にしんどくないブログ</a>\n[^sindo-14]: 参考 <a href=\"https://shisama.hatenablog.com/entry/2020/04/22/011221\">Node.js v14の主な変更点 - 別にしんどくないブログ</a>\n[^sindo-15]: 参考 <a href=\"https://shisama.hatenablog.com/entry/2020/10/21/004612\">Node.js v15の主な変更点 - 別にしんどくないブログ</a>\n[^sindo-16]: 参考 <a href=\"https://shisama.hatenablog.com/entry/2021/04/22/090000\">Node.js v16の主な変更点 - 別にしんどくないブログ</a>\n[^github-node12]: 実際 Node.js 12 のサポートが切れた後に GitHub はどういう対応を取るんですかね。これまでのアクションが動かなくなる事態は避けると思うので、当分 Node.js 12 でも JavaScript action が動くようにはすると思うのですが、さすがにいつかは Node.js 12 で動かなくなるようにするんですかね？</p>\n<h2><a href=\"https://github.blog/changelog/2022-03-04-sharing-github-actions-within-your-enterprise-is-now-ga/\">GitHub Actions で internal リポジトリに置いたアクションが共有できるようになりました</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/miyajan\">@miyajan</a></p>\n<ul>\n<li>GitHub Enterprise Cloud で internal リポジトリに置いたアクションに、同じ Organization(Enterprise) 内の private または internal なリポジトリからアクセスできるようになりました\n<ul>\n<li>これまでアクションを他リポジトリと共有するには public にする必要があったので、組織内でアクションを共有するのが難しかったのですが、共有しやすくなりました</li>\n<li>Organization をまたいでも同じ Enterprise 内なら共有できるのも嬉しいですね</li>\n</ul>\n</li>\n<li>リポジトリの設定で Organization(Enterprise) 内のリポジトリのワークフローからのアクセスを許可する必要があります\n<ul>\n<li><a href=\"https://docs.github.com/en/enterprise-cloud@latest/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository\">Allowing access to components in an internal repository</a></li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20210707#parameter-to-disable-markdown-rendering\">GitHubでMarkdownファイルを開くときに平文表示が可能に</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/gkzvoice\">@gkzvoice</a></p>\n<p>やってみました。</p>\n<ul>\n<li><a href=\"https://gkzz.dev/posts/github-parameter-to-disable-markdown-rendering/\">Githubでmarkdownファイルを開くときに URLに ?plain=1 を付けるとmarkdown形式のまま表示される</a></li>\n</ul>\n<h2><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220119#circleci-now-offers-the-most-generous-free-plan-anywhere-%7C-circleci\">CircleCIのFreeプランでできることが増えた</a></h2>\n<p>共有担当: <a href=\"https://github.com/korosuke613\">@korosuke613</a></p>\n<p>CircleCI の Free プランでできることが増えました。例えば、これまで最大1並列でしか実行できなかったジョブが30並列まで同時実行できるようになったり、Freeプランでは使えなかったセルフホストランナーやプライベート Orb、macOS Executor が使えるようになったりできるようになりました。これまで以上にFreeプランでヘビーに使っていけそうという印象です。</p>\n<p>ただし、できることが増えただけでなく、ネットワークやストレージが新たに課金対象となった[^network-charge]ため、これまで通りビルドしているとFreeプランでは賄いきれなくなる可能性もあり、注意が必要です。</p>\n<p>各プランの比較はこちらのページに載っています。https://circleci.com/ja/pricing/</p>\n<p>[^network-charge]: 公式の発表は見つけられなかったが、よくある質問によると 2022 年 3 月 1 日より有効になる予定とのこと。 https://circleci.com/docs/ja/2.0/faq/#how-do-I-calculate-my-monthly-storage-and-network-costs</p>\n<h2><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220203#docker-desktop%E3%81%8B%E3%82%89rancher-desktop%E3%81%AB%E4%B9%97%E3%82%8A%E6%8F%9B%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F---knqyf263&#x27;s-blog\">Docker Desktopの新たな乗り換え候補、Rancher Desktop</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/ganta0087\">@ganta0087</a></p>\n<p>Rancher DesktopはDocker Desktopと同様の使い勝手で、GUIからDockerホストとなる仮想マシンのリソースを変更したり、pull済みのイメージの管理などができます。\nApache License 2.0のOSSとして公開されています。</p>\n<p>Rancher Desktop自体は2021年5月に登場していましたが、コンテナのランタイムとしてcontainerdにしか対応してしませんでした。\n2021年12月になってdockerdにも対応した0.7.0がリリースされ、2022年1月に1.0.0として正式リリースされました。</p>\n<p>デフォルトでKubernetesも動作するようになっていますが、2022年3月にリリースされた1.1.0ではKubernetesの有効・無効を選択できるようになりました。</p>\n<p>M1 Macにも対応していますが、<a href=\"https://github.com/rancher-sandbox/rancher-desktop/issues/1633\">ネームサーバーの設定に問題</a>があり、<a href=\"https://gist.github.com/mackankowski/be575ec0b81fd8ba3a948d3e84410adc\">ワークアラウンド</a>が必要です。</p>\n<p>また、同時起動しなければDocker Desktopと共存できるのですが、クレデンシャルストアの設定が標準でDocker Desktopになっているため、Rancher Desktop利用時は<code>docker login</code>が使えなくなります。\nこれはKeychainを使うように変更すれば動作するようになります。</p>\n<h2><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220203#serverless-framework-v3-is-live!\">Serverless Framework が v3 にメジャーアップデート</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/gkzvoice\">@gkzvoice</a></p>\n<p>v3の機能紹介は　<a href=\"https://www.serverless.com/blog/serverless-framework-v3-is-live\">Serverless Frameworkのオフィシャルブログ</a> でされているのでそちらをぜひ！　ちなみに <code>serverless-dotenv-plugin</code>　というプラグインがv2からv３へバージョンを引き上げたところうまく動かないという事象に遭遇しました、、</p>\n<ul>\n<li><a href=\"https://gkzz.dev/posts/serverless-dotenv-plugin-not-working-on-serverless-framework-version-3/\">Serverless Framework 3.xでserverless-dotenv-pluginを使った環境変数の読み込みができなかったのでserverless.ymlを修正した</a></li>\n</ul>\n<h2><a href=\"https://dev.classmethod.jp/articles/intro-vitest/\">Jest互換のテストフレームワークVitestで快適にテストする</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/akihisa1210\">@akihisa1210</a></p>\n<ul>\n<li>VitestはJestとの互換性をもつテストフレームワークです。\n<ul>\n<li>（注意）Vitestは開発中のツールで、本番環境での使用はまだ推奨されていません。</li>\n<li><a href=\"https://vitest.dev/\">公式サイト</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=CW9uTys0li0&#x26;t=2s&#x26;ab_channel=VueSchool\">紹介動画</a></li>\n</ul>\n</li>\n<li>公式のExample集は<a href=\"https://github.com/vitest-dev/vitest/tree/main/examples\">こちら</a>。ブラウザ上から試せます。</li>\n<li>Viteでビルドを行っていない環境でもVitest単体で導入できます。\n<ul>\n<li>始めからTypeScriptをサポートしています。</li>\n<li>Viteと併用する場合は設定ファイルが1つにまとまります。</li>\n</ul>\n</li>\n<li>Jestからの移行を試すときは<a href=\"https://vitest.dev/guide/migration.html\">公式の移行ガイド</a>から。</li>\n<li><code>vitest watch</code>でVitestを起動し、ファイル変更時にそのファイルにだけテストを流すのが快適です。</li>\n<li>Vitestはテストコードの型検査をしません。型検査には別のツールを使いましょう。</li>\n</ul>\n<hr>\n<h1>We are hiring</h1>\n"}},"__N_SSG":true}