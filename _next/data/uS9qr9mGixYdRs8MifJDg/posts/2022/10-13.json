{"pageProps":{"post":{"title":"#5 - 2022.10.13","year":"2022","slug":"10-13","content":"<h2><a href=\"https://github.blog/changelog/2022-09-01-github-actions-larger-runners-are-now-in-public-beta/\">GitHub Actions でランナーのリソースを増強できる Larger runners がパブリックベータになりました</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/miyajan\">@miyajan</a></p>\n<ul>\n<li>これまで GitHub が提供する Linux と Windows のランナーは CPU 2 コア、メモリ 7GB でした</li>\n<li>Larger runners では CPU が最大 64 コア、メモリが最大 256 GB までリソースを増強できます</li>\n<li>enterprise もしくは organization レベルでランナーグループを作成し、Larger runners の利用をコントロールできます\n<ul>\n<li>どの organization、どのリポジトリが利用可能かアクセスコントロールが可能です</li>\n</ul>\n</li>\n<li>料金\n<ul>\n<li><a href=\"https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions#per-minute-rates\">使用するリソースの量に応じて利用料金も増えます</a></li>\n<li>通常のランナーはパブリックリポジトリは無料になりますが、Larger runners はパブリックリポジトリでも無料になりません\n<ul>\n<li>パブリックリポジトリで Larger runners を利用すると、外部からのコミットによって想定外の利用料金になる可能性があるので気をつけましょう</li>\n</ul>\n</li>\n<li>通常のランナーはライセンスの種類に応じて無料枠が存在しますが、Larger runners は無料枠の対象になりません</li>\n</ul>\n</li>\n<li>パブリックベータ\n<ul>\n<li>利用するには<a href=\"https://github.com/features/github-hosted-runners/signup\">サインアップページ</a>から申し込み、waitlist に登録する必要があります</li>\n<li>GitHub Team か GitHub Enterprise Cloud プランの organization のみ利用可能です</li>\n</ul>\n</li>\n<li>GitHub Enterprise Cloud の場合、ランナーに固定の IP レンジのアドレスが割り当てられるようにする機能も追加されてます</li>\n<li>これまで大量のリソースが必要なジョブを実行するには、ジョブを分割して並列実行するか、AWS/GCP など外部リソースに処理を持っていくかするしかなかったですが、GitHub Actions の単独のランナーで実現できる選択肢が増え、嬉しい場面がありそうです</li>\n</ul>\n<h2><a href=\"https://github.blog/changelog/2022-09-08-github-actions-use-github_token-with-workflow_dispatch-and-repository_dispatch/\">GitHub Actions の GITHUB_TOKEN で workflow_dispatch と repository_dispatch イベントのワークフローを呼び出せるようになりました</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/miyajan\">@miyajan</a></p>\n<ul>\n<li>GitHub Actions のワークフロー実行時に自動で <code>GITHUB_TOKEN</code> というシークレットが割り当てられ、ワークフロー内で GitHub へアクセスするときに利用できます\n<ul>\n<li>例えば、<a href=\"https://github.com/actions/checkout\">actions/checkout</a> アクションはデフォルトでこの <code>GITHUB_TOKEN</code> を使って認証してリポジトリをチェックアウトします</li>\n</ul>\n</li>\n<li>これまでは、<code>GITHUB_TOKEN</code> で GitHub のイベントを発生させる操作を行ったときに、別ワークフローをトリガーしないようになっていました\n<ul>\n<li>例えば、<code>GITHUB_TOKEN</code> を使ってリポジトリにコミットを push しても、GitHub Actions の <code>on: push</code> イベントのワークフローは実行されません</li>\n<li>これは、ユーザーが誤ってワークフローの無限ループを引き起こすのを防ぐ目的の制限です</li>\n<li>なので、ワークフローから別のワークフローをトリガーしたい場合は、パーソナルアクセストークンなど別の認証方法でイベントを発生させる必要がありました</li>\n</ul>\n</li>\n<li>今回の変更で、<code>GITHUB_TOKEN</code> を使って <code>workflow_dispatch</code> イベントや <code>repository_dispatch</code> イベントを引き起こしたときは、対応する GitHub Actions のワークフローがトリガーされるように緩和されました\n<ul>\n<li>これらのイベントは明示的にワークフローを呼び出すためのイベントなので、誤って無限ループを引き起こすリスクは低いと判断されたようです</li>\n</ul>\n</li>\n<li>今回の修正により、パーソナルアクセストークンなど別の認証方法を用意せずに実現できるシナリオが増えそうです\n<ul>\n<li>例えば、ワークフローからコミットを作成して、CI ワークフローを <code>workflow_dispatch</code> イベントや <code>repository_dispatch</code> イベントで呼び出すようにするとか</li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://zenn.dev/emiksk/articles/f45c5fd771e90a\">gRPC サーバのビルドに Earthly を使ってみよう</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/emiksk0910\">@emiksk0910</a></p>\n<ul>\n<li><a href=\"https://cybozu.github.io/productivity-news/posts/2022/07-14/\">Cybozu Productivity News #4</a>でも紹介した OSS のビルドツール Earthly の入門記事を2つ書いたのでその紹介です</li>\n<li>Go で書かれた gRPC サーバーを題材に Earthly を使ってスタブコードの生成やテスト、バイナリビルド、Dockerイメージの生成とプッシュを行う入門記事です</li>\n<li>実例を基に Earthly の基本的な構文の説明をしています</li>\n<li>Makefile + Docker といった感じの触り心地で、Dockerfile を書いたことがある人なら苦もなく使えるようになると思います</li>\n<li>学習コストの低さ、コンテナ上でタスクを実行することによる可搬性と再現性<sup><a href=\"#user-content-fn-repeatability\" id=\"user-content-fnref-repeatability\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>の高さ、キャッシュの仕組みの理解のしやすさなどが特徴です</li>\n</ul>\n<h2><a href=\"https://zenn.dev/emiksk/articles/ba3b0183c3f895\">Earthly を GitHub Actions で使ってみよう</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/emiksk0910\">@emiksk0910</a></p>\n<ul>\n<li>続いて前の記事で書いた Earthfile (Earthly のタスク定義ファイル) を題材に、Earthly を GitHub Actions で実行する方法を説明しています</li>\n<li>内容の大部分は Earthly のキャッシュの仕組みについての説明になっています\n<ul>\n<li>inline cache: タスクの成果物としての Docker イメージをタスク実行のためのキャッシュに用いる</li>\n<li>explicit cache: タスクの中間イメージをキャッシュのために別途リモートレジストリに保存し、それをタスク実行のためのキャッシュに用いる</li>\n</ul>\n</li>\n<li>記事執筆のついでに複数のリモートキャッシュを読み込めるようにして、キャッシュの優先順位を設定できる <a href=\"https://github.com/earthly/earthly/pull/2063\">Pull request</a> を Earthly 本体に出しました\n<ul>\n<li><a href=\"https://github.com/earthly/earthly/releases/tag/v0.6.22\">v0.6.22</a>でリリースされています 🎉</li>\n</ul>\n</li>\n<li><a href=\"https://docs.earthly.dev/earthly-cloud/satellites\">Earthly Satellites</a> という Earthly を実行するためのリモートインスタンスを立ち上げて、そこでタスクを実行する機能もベータですが存在しています\n<ul>\n<li>同じ Satellite インスタンスを CI で用いることで、リモートではなくローカルのキャッシュをジョブに使えるようになります</li>\n</ul>\n</li>\n<li>まだリリースされていませんが、Earthly CI なるものも計画されているようです</li>\n<li>Earthly 便利なのでみなさんもぜひ使ってみてください</li>\n</ul>\n<h2><a href=\"https://www.hashicorp.com/blog/cdk-for-terraform-now-generally-available\">CDK for Terraform(CDKTF) が GA になりました</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/r4mimu\">@r4mimu</a></p>\n<ul>\n<li>Cloud Development Kit for Terraform (CDKTF) が8月にGAになりました</li>\n<li>HCL を書かずに、使い慣れたプログラミング言語でインフラの定義ができます\n<ul>\n<li>2022年10月1日時点でTypeScript、Python、Java、C#、Go がサポートされています</li>\n</ul>\n</li>\n<li>ユニットテスト用のライブラリも用意されています</li>\n<li><code>cdktf synth</code> というコマンドで Terraform CLI から利用できる JSON 形式の <code>cdk.tf.json</code> という設定ファイルが生成され、<code>cdk.tf.json</code> があるディレクトリ内で Terraform CLI を実行することができます</li>\n<li>逆に、<code>cdktf convert</code> コマンドで HCL を CDKTF のコードに変換する事もできます</li>\n<li>正直、使い所がわかっていませんが動的にインフラを生成したい際の選択肢として考えられそうです</li>\n</ul>\n<h2><a href=\"https://speakerdeck.com/tmknom/terraform-module-designs\">Terraform Module Designs 思考の引き出しを増やすモジュール設計のヒント</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/r4mimu\">@r4mimu</a></p>\n<ul>\n<li>「実践Terraform」の著者の方によるモジュール設計についてのヒントがまとまったスライド</li>\n<li>Terraform module の設計の仕方にとどまらず、ソフトウェア開発における設計の思想を述べている\n<ul>\n<li>書籍などから様々な格言を引用して説明しており、読み物として面白いです</li>\n</ul>\n</li>\n<li>標準プラクティスとして、まず<a href=\"https://www.terraform.io/\">公式ドキュメント</a>を読むことを推奨しています\n<ul>\n<li>とりあえず公式ドキュメントに倣って、イマイチに感じたら後から変えていく</li>\n<li>いかに「後から変えていく」を上手にできるように設計しようと述べています</li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://engineering.mercari.com/blog/entry/20220121-securing-terraform-monorepo-ci/\">TerraformモノレポCIのセキュア化 | メルカリエンジニアリング</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/r4mimu\">@r4mimu</a></p>\n<ul>\n<li>モノレポ Terraform の CI をセキュアに構築した話</li>\n<li>メルカリではグループ内のすべての Terraform をまとめてモノレポで管理しており、terraform apply はモノレポ内に配置した CI パイプライン上で実行されるようになっていた</li>\n<li>その CI 環境における以下のような課題と対策が書かれています\n<ul>\n<li>永続的なサービスアカウントキーが漏えいした場合、手動で無効にするまで悪意のある人物は何でもできてしまう</li>\n<li>すべての Project に対するオーナー権限を持つサービスアカウントが存在する</li>\n<li>任意のコマンドが実行されるリスク（CI パイプラインや Terraform プロバイダによる任意コード実行）</li>\n</ul>\n</li>\n<li>クラウドには GCP を利用している場合での話ですが、AWS やモノレポでない環境においても永続的なサービスアカウント対策や任意のコマンド実行対策は参考になると思いました</li>\n<li>永続的なサービスアカウントキーを排除するために、CIプラットフォームを CircleCI から Cloud Build に移行することにしたとあり、CIプラットフォームをクラウドサービスに寄せるのは確かになと思った一方、どのように移行したのか個人的に気になりました</li>\n<li>terraform apply を CI で行うにはセキュリティ面で色々な問題が考えられると思いますが、対処事例として参考になりました</li>\n</ul>\n<h2><a href=\"https://speakerdeck.com/harukasakihara/sekiyuanaterraformfalseshi-ifang-ji-mi-qing-bao-wokodonihan-mezuhuan-jing-gou-zhu-surunihadousitaraiifalse\">セキュアなTerraformの使い方 ～ 機密情報をコードに含めず環境構築するにはどうしたらいいの？</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/r4mimu\">@r4mimu</a></p>\n<ul>\n<li>Terraform でセキュアにシークレットを扱う方法について解説したスライド</li>\n<li><code>.tf</code> ファイルに機密情報を記述しない例として Terraform の Data Source や git 管理外ファイルに定義する方法が考えられるが、これらはNG\n<ul>\n<li><code>tfstate</code> ファイルとは何か？から始まり、<code>tfstate</code> ファイルには機密情報が含まれてしまうことを解説</li>\n</ul>\n</li>\n<li><code>tfstate</code> ファイルに機密情報が入ることを防ぐにはどうすればいいか\n<ul>\n<li>senitive 属性を付与することや <code>tfstate</code> ファイルを暗号化するなど一見良さそうな方法でもセキュアでないことを分かりやすく説明している</li>\n</ul>\n</li>\n<li>結論として <code>tfstate</code> ファイルに機密情報が含まれることをやめるべきであり、どうやってやめるかを代替案を紹介</li>\n<li>Terraform 初心者でも理解しやすいので一度目を通しておくと良いと思います</li>\n</ul>\n<h2><a href=\"https://cloud.google.com/docs/terraform/best-practices-for-terraform?hl=ja\">Terraform を使用するためのベスト プラクティス</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/r4mimu\">@r4mimu</a></p>\n<ul>\n<li>Google による Terraform を使用するベストプラクティス</li>\n<li>スタイルや構造に関する一般的なものから、モジュール構成やバージョン管理についても触れられています\n<ul>\n<li>前述した機密情報の話や認証情報は CI/CD パイプラインに寄せることを推奨する話もあります</li>\n</ul>\n</li>\n<li>各トピックごとに推奨例と非推奨例が載っており、理解しやすいです</li>\n<li>余談ですが <code>alias terrafrom=\"terraform\"</code> を追加しようという内容があって面白かったです</li>\n</ul>\n<hr>\n<h1>We are hiring</h1>\n<a href=\"https://note.com/cybozu_dev/n/n1c1b44bf72f6\">\n<img src=\"https://user-images.githubusercontent.com/471182/156986297-b189ef3d-98d3-4490-af5c-007a4ab47e5e.png\" alt=\"サイボウズの開発者の生産性を上げる「生産性向上チーム」とは！？\" width=\"600\">\n</a>\n<section data-footnotes class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-repeatability\">\n<p>Docker イメージを上手に作らないと再現性の高さは得られないことに注意してください。イメージをビルドする時に依存するライブラリのバージョンが不定だと容易に再現性が下がります。 <a href=\"#user-content-fnref-repeatability\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n</ol>\n</section>\n"}},"__N_SSG":true}