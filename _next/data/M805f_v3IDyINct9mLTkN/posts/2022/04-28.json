{"pageProps":{"post":{"title":"#2 - 2022.04.28","year":"2022","slug":"04-28","content":"<h2><a href=\"https://github.blog/2022-03-16-save-time-partial-re-runs-github-actions/\">GitHub Actions で一部のジョブだけ Re-run できるようになりました</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/miyajan\">@miyajan</a></p>\n<ul>\n<li>GitHub Actions で、ジョブ単位で再実行したり、失敗したジョブのみ再実行したりできるようになりました</li>\n<li>これまでは全ジョブをまとめて再実行するしかなかったので、大規模なワークフローで E2E テストのような不安定なジョブが含まれると、再実行時に余計なジョブを動かす時間やコストが厳しいという問題がありました</li>\n<li><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220316#ability-to-restart-individual-github-actions-ci-builds-%C2%B7-discussion-%234278-%C2%B7-github%2Ffeedback\">参考</a></li>\n</ul>\n<h2><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220316#tag-protection-rules-%7C-github-changelog\">GitHub において Tag の保護ができるようになりました</a></h2>\n<p>共有担当: <a href=\"https://github.com/korosuke613\">@korosuke613</a></p>\n<p>GitHub において Tag を保護できる Tag protection rules を設定できるようになりました。まだベータ機能です。</p>\n<p>パターン（ワイルドカード可）にマッチするタグは作成・削除に制限がかかります。作成は Maintain、Admin ロールの保持者のみ。削除は Admin ロールの保持者のみできます。</p>\n<p>Go などの Git tag が強い意味を持つようなリポジトリにおいて効果が発揮できそうです。しかし、タグ付けの部分も CI で自動化しているようなケースではあまり活用できないかもしれません<sup><a href=\"#user-content-fn-strong_user\" id=\"user-content-fnref-strong_user\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>。</p>\n<h2><a href=\"https://circleci.com/ja/changelog/#%E3%82%B8%E3%83%A7%E3%83%96%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B-oidc-%E3%83%88%E3%83%BC%E3%82%AF%E3%83%B3\">CircleCI の OIDC 対応</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/miyajan\">@miyajan</a></p>\n<ul>\n<li>CircleCI が OpenID Connect (OIDC) をサポートし、永続的なシークレットを使わずに AWS や GCP などのクラウドプロバイダへの認証が可能になりました\n<ul>\n<li>GitHub Actions では 2021/10 に同様の機能が公開されていました（<a href=\"https://zenn.dev/miyajan/articles/github-actions-support-openid-connect\">参考</a>）</li>\n</ul>\n</li>\n<li><a href=\"https://circleci.com/docs/ja/2.0/openid-connect-tokens/\">ジョブでの OpenID Connect トークンの使用 - CircleCI</a></li>\n<li><a href=\"https://dev.classmethod.jp/articles/circleci-supported-oidc-so-i-tried-linking-it-with-aws/\">CircleCIがOpenID ConnectをサポートしたのでAWSと連携させてJWTを使用したAssumeRoleを試してみた | DevelopersIO</a></li>\n<li>CircleCI 公式 Orb の OIDC 対応\n<ul>\n<li><a href=\"https://circleci.com/developer/ja/orbs/orb/circleci/aws-cli\">circleci/aws-cli</a> は収録時には OIDC 対応していませんでしたが、配信時には対応された <a href=\"https://github.com/CircleCI-Public/aws-cli-orb/releases/tag/v3.1.0\">v3.1.0</a> がリリースされました</li>\n<li><a href=\"https://circleci.com/developer/ja/orbs/orb/circleci/gcp-cli\">circleci/gcp-cli</a> はまだ OIDC サポートされていないため、認証は自前でスクリプトを書く必要があります\n<ul>\n<li><a href=\"https://twitter.com/CircleCIJapan/status/1509025350860255234\">CircleCI Japan の Tweet</a> によると、<a href=\"https://circleci.canny.io/orbs/p/extend-existing-orbs-to-support-oidc\">こちら</a>を Vote すると Orb 側での対応の優先度が上がるかもしれません</li>\n<li>一応すでに <a href=\"https://github.com/CircleCI-Public/gcp-cli-orb/issues/41\">issue</a> があります</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220406#%E3%83%9E%E3%83%AB%E3%83%81%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E5%AF%BE%E5%BF%9C%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%82%92%E3%81%A9%E3%81%86%E3%81%AB%E3%81%8B%E6%97%A9%E3%81%8F%E3%81%97%E3%81%9F%E3%81%8B%E3%81%A3%E3%81%9F---%E3%81%BD%E3%82%88%E3%83%A1%E3%83%A2\">マルチアーキテクチャ対応イメージのビルドをどうにか早くしたかった</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/gkzvoice\">@gkzvoice</a></p>\n<ul>\n<li>マルチアーキテクチャ対応イメージのビルドの方法とCI環境での高速化の検証記事です。</li>\n<li><code>docker manifest</code> と <code>docker buildx</code> どちらもあまりよくわかっていなかったですが、ARM環境下でコンテナを扱うケースは増えるだろうと考え、取り上げました。</li>\n<li>個人的には、コマンドやビルドの並列実行とコンテナ化を推し進めることで、コンテナ実行環境のCPUアーキテクチャを意識するようになったというのがおもしろいなーと。マルチアーキテクチャなコンテナ環境が一層求められるようになるのか？注目したいですね。</li>\n</ul>\n<h2><a href=\"https://zenn.dev/miroha/articles/whats-docker-compose-v2\">Docker Compose V2で変わったdocker-compose.ymlの書き方</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/ganta0087\">@ganta0087</a></p>\n<ul>\n<li>Docker Compose v2はv1の記法の後方互換性を保ちつつ、新たに<a href=\"https://github.com/compose-spec/compose-spec/blob/master/spec.md\">Compose Specification</a>に準拠した記法が使えるようになりました。</li>\n<li>Docker ComposeはCompose Specificationのリファレンス実装となっており、他には<a href=\"https://github.com/containerd/nerdctl\">Nerdctl</a>などで実装されています。</li>\n<li>Composeファイルの名前は<code>compose.{yaml,yml}</code>が追加され、探索順はそちらが優先されるようになっていたり、<code>version</code>プロパティの記述が不要となっていたりします。</li>\n<li>こちらの記事では紹介されていないのですが、<a href=\"https://github.com/compose-spec/compose-spec/blob/master/spec.md#profiles\">Profiles</a>が便利だと思いました。\n<ul>\n<li><a href=\"https://docs.docker.com/compose/profiles/\">DockerのProfilesについてのドキュメント</a></li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://github.com/hashicorp/terraform-provider-aws/blob/main/CHANGELOG.md#490-april-07-2022\">Terraform AWS Provider 4.9.0 (April 07, 2022)リリース</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/gkzvoice\">@gkzvoice</a></p>\n<ul>\n<li>前提として、AWS Provider 4.0で <code>aws_s3_bucket</code> リソースの仕様変更があり、それに合わない書き方はエラー判定とされていました。\n<ul>\n<li><a href=\"https://github.com/hashicorp/terraform-provider-aws/issues/23125\">https://github.com/hashicorp/terraform-provider-aws/issues/23125</a></li>\n</ul>\n</li>\n<li>4.9.0 ではエラー判定ではなく、WARNING判定とドリフト検知がされることとなりました。\n<ul>\n<li>AWS Providerのバージョンを3.70.0から4.9に引き上げてみたときの作業ログ\n<ul>\n<li><a href=\"https://gkzz.dev/posts/changes-to-s3-bucket-drift-detection-with-aws-provider-v4/\">[Changes to S3 Bucket Drift Detection] Terraform AWS Provider 4.9のaws_s3_bucketリソースにおけるアップデート内容 | gkzz.dev</a></li>\n</ul>\n</li>\n<li>クラスメソッドさんの検証記事\n<ul>\n<li><a href=\"https://dev.classmethod.jp/articles/terraform-s3-v4-9-0-refactoring/\">【Terraform】AWS Provider v4.9.0のS3リファクタリングの挙動を試してみた | DevelopersIO</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>今後のアップデートでエラー判定とする仕様に戻るか分からない以上、<code>aws_s3_bucket</code> リソースの仕様変更に追随したほうがよいとは思います。検証を重ねて仕様変更にキャッチアップしたいですね。</li>\n<li>詳細はTerraform のドキュメントの以下のページが一番詳しかったです。\n<ul>\n<li><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/guides/version-4-upgrade#changes-to-s3-bucket-drift-detection\">Changes to S3 Bucket Drift Detection | Terraform Registry</a></li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://aws.amazon.com/blogs/aws/announcing-aws-lambda-function-urls-built-in-https-endpoints-for-single-function-microservices/\">AWS Lambda が単体でHTTPSエンドポイントを持てるようになりました</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/ganta0087\">@ganta0087</a></p>\n<ul>\n<li>これまではちょっとしたWebhookのエンドポイントを作りたいときにはAPI Gatewayを併用する必要がありました。</li>\n<li>設定からFunction URLを有効にすると<code>https://&#x3C;url-id>.lambda-url.&#x3C;region>.on.aws</code>の形式でURLが払い出されます。</li>\n<li>対応している認証方式はIAMのみです。</li>\n<li>Webページ内から呼び出す場合はCORSの設定で許可するオリジンを指定できます。</li>\n<li>費用はLambdaの呼び出し料金に含まれており、Function URLsの追加による費用はありません。</li>\n<li><a href=\"https://dev.classmethod.jp/articles/aws-lambda-function-urls-built-in-https-endpoints/\">[アップデート]LambdaがHTTPSエンドポイントから実行可能になる、AWS Lambda Function URLsの機能が追加されました！ | DevelopersIO</a></li>\n</ul>\n<h2><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220323#playwright-%26-vite-%E3%81%A7%E3%81%AF%E3%81%98%E3%82%81%E3%82%8B%E8%84%B1%E3%83%AC%E3%82%AC%E3%82%B7%E3%83%BC%E5%90%91%E3%81%91%E8%BB%BD%E9%87%8F-visual-regression-test\">Playwright &#x26; Vite ではじめる脱レガシー向け軽量 Visual Regression Test</a></h2>\n<p>共有担当: <a href=\"https://github.com/korosuke613\">@korosuke613</a></p>\n<p>テストフレームワークの Playwright と TypeScript のビルドツールである Vite を使って軽量な Visual Regression Test (VRT) を行うというノウハウ記事です。VRT の説明や Playwright での始め方、Vite との組合せ方などが載っています。</p>\n<p>僕もこの記事を参考に自身のホームページに VRT 導入してみました<sup><a href=\"#user-content-fn-unused_vite\" id=\"user-content-fnref-unused_vite\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>。プルリクエスト時に、CI で main ブランチとトピックブランチそれぞれでビルド＆サーブし、見た目上の差分が無いかを確認します。主に Renovate などを用いた依存関係更新に利用する想定です。時たま不安定になったり、CI 上で比較するには工夫が必要だったりと大変でした。見た目が変わらないことを保証できるのがやはり良く、今では Renovate が作成するプルリクエストを安心して automerge できるようになったのが嬉しいですね。</p>\n<h2><a href=\"https://cypress-io.ghost.io/blog/2022/03/28/real-world-testing-with-cypress/\">Introducing Real World Testing with Cypress</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/akihisa1210\">@akihisa1210</a></p>\n<ul>\n<li>E2E テストフレームワーク Cypress を開発している Cypress 社が、チュートリアルサイト <a href=\"https://learn.cypress.io/\">Real World Testing with Cypress</a> を公開しました</li>\n<li>このサイトは、「開発者が良いテストを書くために知っておくべき情報が散らばっている」という課題を解決するために作られました。</li>\n<li><a href=\"https://learn.cypress.io/\">4コースの学習リソース</a>、<a href=\"https://learn.cypress.io/real-world-examples\">テストが書かれたサンプルアプリケーションとその解説</a>、<a href=\"https://learn.cypress.io/tutorials\">アプリを作成してテストを書くチュートリアル</a>が含まれています。\n<ul>\n<li>4コースの学習リソースには<a href=\"https://learn.cypress.io/cypress-fundamentals\">Cypress の使い方</a>だけでなく、<a href=\"https://learn.cypress.io/testing-foundations\">テストの考え方自体</a>の学習リソースも含まれているのが特徴的です。</li>\n</ul>\n</li>\n<li>また、<a href=\"https://github.com/cypress-io/cypress-realworld-testing\">サイト自体が OSS として公開されており</a>、<a href=\"https://github.com/cypress-io/cypress-realworld-testing/tree/main/cypress/integration\">E2E テストが Cypress で書かれています</a>。</li>\n</ul>\n<h2>その他の注目ネタ</h2>\n<ul>\n<li>GitHub\n<ul>\n<li><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220323#github-actions%3A-restrict-self-hosted-runner-groups-to-specific-workflows-%7C-github-changelog\">指定したワークフローのみ利用を許可する設定をセルフホストランナーグループにできるようになりました</a></li>\n<li><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220323#introducing-the-ghes-repository-cache-%7C-the-github-blog\">GHESでGitリポジトリのキャッシュサーバを利用できるようになりました</a></li>\n<li><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220330#ignore-commits-in-the-blame-view-(beta)-%7C-github-changelog\">Ignore commits in the blame view (Beta) | GitHub Changelog</a></li>\n<li>依存関係をレビューする公式アクションが登場しました</li>\n</ul>\n</li>\n<li>CircleCI\n<ul>\n<li><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220316#ubuntu-14.04-and-16.04-image-deprecation---circleci-changelog\">Ubuntu 14.04、16.04 のマシンイメージが使えなくなるよ</a></li>\n</ul>\n</li>\n<li>Terraform\n<ul>\n<li><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220323#terraform-%E3%81%A8-gcloud-cli-%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E5%AE%8C%E7%92%A7%E3%81%AA-google-cloud-%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%83%81%E3%83%A3%E3%81%AE%E6%A7%8B%E7%AF%89-%7C-google-cloud-blog\">Terraform と gcloud CLI を使用した完璧な Google Cloud インフラストラクチャの構築 | Google Cloud Blog</a></li>\n</ul>\n</li>\n<li>その他\n<ul>\n<li><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220316#ssh-and-git%2C-meet-1password-%F0%9F%A5%B0\">SSH and Git, meet 1Password 🥰</a></li>\n<li><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220323#twitterdev%2Ftwitter-api-typescript-sdk%3A-a-typescript-sdk-for-the-twitter-api\">twitterdev/twitter-api-typescript-sdk: A TypeScript SDK for the Twitter API</a></li>\n<li><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20220406#technology-radar-%7C-an-opinionated-guide-to-technology-frontiers-%7C-thoughtworks\">Technology Radar Vol.26が公開</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>We are hiring</h1>\n<a href=\"https://note.com/cybozu_dev/n/n1c1b44bf72f6\">\n<img src=\"https://user-images.githubusercontent.com/471182/156986297-b189ef3d-98d3-4490-af5c-007a4ab47e5e.png\" alt=\"サイボウズの開発者の生産性を上げる「生産性向上チーム」とは！？\" width=\"600\">\n</a>\n<section data-footnotes class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-strong_user\">\n<p>強い権限を持ったユーザの Personal Access Token を使うなどすれば良いけど、あんまり強い権限のトークンを出したくなかったり、Actions の場合は GITHUB_TOKEN を使いたかったりしますよね。 <a href=\"#user-content-fnref-strong_user\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n<li id=\"user-content-fn-unused_vite\">\n<p>詳しくはこの<a href=\"https://github.com/korosuke613/myHomepage/compare/9f248dab326ee93b9e12c83d15f80f68692f0602..045bd4624f464fe09a255eb11f10df602fd062c8\">差分</a>と <a href=\"https://app.circleci.com/pipelines/github/korosuke613/myHomepage\">CI</a> の <code>visual-regression-testing</code> ワークフローを参照。Vite の導入は型周りでのエラーが頻発して導入を諦めました... <a href=\"#user-content-fnref-unused_vite\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n</ol>\n</section>\n"}},"__N_SSG":true}