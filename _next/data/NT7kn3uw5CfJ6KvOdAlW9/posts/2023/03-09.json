{"pageProps":{"post":{"title":"#7 - 2023.03.09","year":"2023","slug":"03-09","content":"<h2><a href=\"https://github.blog/changelog/2023-02-08-pull-request-merge-queue-public-beta/\">Pull request merge queue (public beta) | GitHub Changelog</a></h2>\n<p>共有担当: <a href=\"https://github.com/korosuke613\">@korosuke613</a></p>\n<ul>\n<li>GitHub において、pull request merge queue がパブリックベータになりました\n<ul>\n<li><a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20211108#pull-request-merge-queue-limited-beta-%7C-github-changelog\">一昨年のプライベートベータ</a>から約一年かかりましたね</li>\n</ul>\n</li>\n<li>マージキューはプルリクエストが頻繁に飛び交うリポジトリにおいて特に有効です。プルリクエストをすぐにマージするのではなく、キューに溜め込み、溜まったプルリクエストをまとめたブランチを作り、CI にかけマージするという手法になります\n<ul>\n<li>マージキューがなぜ嬉しいかについては<a href=\"https://zenn.dev/korosuke613/articles/productivity-weekly-20211108#pull-request-merge-queue-limited-beta-%7C-github-changelog\">過去の記事</a>を参照ください</li>\n</ul>\n</li>\n<li>現時点では GHEC、Organization のみ利用可能であるため、個人のリポジトリでの利用はできません\n<ul>\n<li>将来的に個人でも使えるのかは分かりませんが、個人で使うメリットはあまりなさそうです（renovate などのプルリクエストをまとめてマージするのに便利かも？）</li>\n</ul>\n</li>\n<li>実際に会社のリポジトリで試してみました\n<ul>\n<li><a href=\"https://zenn.dev/link/comments/4e39f8e985babb\">GitHubのPull request merge queueを試す</a></li>\n</ul>\n</li>\n<li>次のリンクの人の方がもっとわかりやすくまとめてくれています\n<ul>\n<li><a href=\"https://medium.com/@ronnnnn_jp/github-%E3%81%AE-merge-queue-%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%A6%E5%88%86%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8-5c5b94cf477b\">GitHub の merge queue を試してみて分かったこと | by Seiya Kokushi | Feb, 2023 | Medium</a></li>\n<li>特に、merge queue に詰められた後のコミット順の項目は非常に分かりやすく、参考になります</li>\n</ul>\n</li>\n<li>感想としては、結構複雑な仕組みなので、仕様をきちんと知らないと想定通りの利用が難しいという印象です。しかし、使いこなせればとても強力だと思います。皆さんも大規模リポジトリで有効活用してみてください</li>\n</ul>\n<h2><a href=\"https://brew.sh/2023/02/16/homebrew-4.0.0/\">Homebrew 4.0.0 Release</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/ganta0087\">@ganta0087</a></p>\n<ul>\n<li>Homebrew 4.0.0がリリースされました🎉</li>\n<li>インストールパッケージの情報源となるhomebrew/coreとhomebrew/caskをTapとしてではなく、formulae.brew.shからJSONファイルを取得する方式に変更されました。\n<ul>\n<li>巨大化したこれらのリポジトリのTapによるGitクローンは非常に低速だったため、JSONダウンロード方式への移行で高速化されました。</li>\n<li><code>brew update</code>の自動実行の頻度が5分から24時間に変更されました。</li>\n<li>FormulaeやTapsの開発を行っていなければhomebrew/coreとhomebrew/caskのTapを解除できます。手元の環境ではディスク使用量が約1GB削減されました。</li>\n</ul>\n</li>\n<li>HomebrewのアナリティクスがGoogle AnalyticsからセルフホストされたInfluxDBへ変更される予定です。\n<ul>\n<li>今回のリリースでアナリティクスの送信先として、EUに置かれたセルフホストされたInfluxDBインスタンスが追加されました。</li>\n<li>Google Analyticsやアメリカにデータが送信されることを嫌ってアナリティクス機能を無効にしていたユーザーに有効にして貰うことを期待しているようです。</li>\n<li>現在は移行期間で4.0.0のリリースから90日後にGoogle Analyticsへの送信は停止され、データもすべて破棄されるとのことです。</li>\n</ul>\n</li>\n<li><a href=\"https://www.publickey1.jp/blog/23/homebrew_40git_clonejson.html\">パッケージマネージャ「Homebrew 4.0」正式リリース、より高速に。Git cloneからJSONによるパッケージ管理へ切り替え － Publickey</a></li>\n<li><a href=\"https://twitter.com/mikemcquaid/status/1626140850999664641\">作者のMike McQuaid氏のツイート</a></li>\n</ul>\n<h2><a href=\"https://github.blog/changelog/2023-02-02-github-actions-updating-the-default-github_token-permissions-to-read-only/\">GitHub Actions – Updating the default GITHUB_TOKEN permissions to read-only</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/r4mimu\">@r4mimu</a></p>\n<ul>\n<li>これまで GitHub Actionsは、リポジトリ上でActionsを有効にすると、デフォルトで読み取り/書き込みの両方のパーミッション(<code>write-all</code>)を持つGITHUB_TOKENを取得していました\n<ul>\n<li>そのため <code>actions/checkout@v3</code> のような <code>read-only</code> でよいアクションに過剰に権限が付与されていることになります</li>\n</ul>\n</li>\n<li>しかし、デフォルトで <code>write-all</code> というのは権限が強すぎるため、<code>read-only</code> 権限に変更されました(2023.02.02)</li>\n<li>この変更は既存の enterprises, organizations, repositories の設定には影響を与えません</li>\n<li>今後のデフォルト設定は Enterprise -> Organization -> Repository の順に権限が継承されます</li>\n<li>デフォルト権限が安全側に倒されるのは助かりますね</li>\n</ul>\n<h2><a href=\"https://efcl.info/2023/02/01/update-github-actions-permissions-v2/\">update-github-actions-permissions v2をリリース: 500種類のGitHub Actionsのpermissionsに対応</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/r4mimu\">@r4mimu</a></p>\n<ul>\n<li>update-github-actions-permissionsは <code>.github/workflow/*.yml</code> のWorkflowファイルに対して、利用してるActionから最小限 permissionsを自動的に設定するツールです</li>\n<li>先の記事でも共有したとおり、GitHub Actions のワークフローに対するのデフォルト権限は <code>write-all</code> でした</li>\n<li>このツールはコマンドで、Workflowファイル内の過剰な権限が付与されてい るAction に <code>permissions</code> を設定します</li>\n<li>update-github-actions-permissions v1では、50種類ほどのGitHub Actionsのpermissionsをサポートをしていましたが、v2では500種類以上のGitHub Actionsのpermissionsをサポートされています</li>\n<li>update-github-actions-permissionsはシンプルにpermissionsを自動で設定するだけのツールであり、<code>Read repository contents permission</code>をデフォルトにするために移行するツールという位置付けだそうです</li>\n</ul>\n<h2><a href=\"https://zenn.dev/kesin11/articles/gha_releasenote_ghes\">GitHub Actions関連機能とGHESリリースノートの対応表</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/r4mimu\">@r4mimu</a></p>\n<ul>\n<li>GitHub.com における GitHub Actions の新機能リリースが GitHub Enterprise Server(GHES) のどのバージョンで利用できるかをまとめた対応表記事です</li>\n<li>この記事では以下の項目を Changelog ごとにリリース日、ドキュメントへのリンク、対応した GHES のバージョンを表にまとめています\n<ul>\n<li>時系列で降順になっているのでとても見やすいです</li>\n</ul>\n</li>\n<li>サイボウズ社内でも GHES は利用しており、GHES のActions で機能が対応しているかを確認したい際に重宝しています</li>\n<li>有志の手動更新なので気づいた点や反映されていない更新があったらコメントしていきたいですね</li>\n</ul>\n<h2><a href=\"https://dev.classmethod.jp/articles/terraform-cloud-dynamic-provider-credentials/\">[アップデート]Terraform CloudがValutやAWS,Azure,Google Cloudに対してOIDCで動的なクレデンシャル生成に対応 | DevelopersIO</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/defaultcf\">@defaultcf</a></p>\n<ul>\n<li><a href=\"https://www.hashicorp.com/blog/terraform-cloud-adds-dynamic-provider-credentials-vault-official-cloud-providers\">Terraform Cloud Adds Dynamic Provider Credentials for Vault and Official Cloud Providers</a></li>\n<li>今までは Terraform Cloud で AWS の認証を行うには、IAM アクセスキーを使う必要があり、AWS_ACCESS_KEY_ID と AWS_SECRET_ACCESS_KEY を環境変数に設定するしかありませんでした</li>\n<li>今回の Terraform Cloud のアップデートによって、OIDC を使って AWS の認証ができるようになりました\n<ul>\n<li>退職に伴うキーのローテーションなどが必要なくなります</li>\n</ul>\n</li>\n<li>試してみました\n<ul>\n<li>OIDC Provider と IAM Role を作成\n<ul>\n<li>IAM Role には、今まで IAM ユーザーに付与していた各種権限を同じように付与</li>\n</ul>\n</li>\n<li>Terraform Cloud で次の設定をします\n<ul>\n<li>TFC_AWS_PROVIDER_AUTH を true に設定</li>\n<li>TFC_AWS_RUN_ROLE_ARN を Terraform で作成したロールの ARN に設定</li>\n</ul>\n</li>\n<li>最後に AWS の IAM アクセスキーを環境変数から削除</li>\n</ul>\n</li>\n<li>便利なので、Terraform Cloud を使っている方は OIDC に移行するとより安全で良いかと思います</li>\n</ul>\n<h2><a href=\"https://github.blog/changelog/2023-01-31-audit-log-streaming-to-aws-s3-integration-with-aws-cloudtrail-lake/\">Audit log streaming to AWS S3 integration with AWS CloudTrail Lake | GitHub Changelog</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/defaultcf\">@defaultcf</a></p>\n<ul>\n<li>GitHub の audit log を AWS に出力する機能は2022年1月に GA となっています</li>\n<li>今回は AWS 側のアップデートにより、さらに CloudTrail Lake に取り込めるようになりました\n<ul>\n<li><a href=\"https://aws.amazon.com/jp/blogs/news/new-aws-cloudtrail-lake-supports-ingesting-activity-events-from-non-aws-sources/\">新規 — AWS CloudTrail Lake が AWS 以外のソースからのアクティビティイベントの取り込みをサポート | Amazon Web Services ブログ</a></li>\n<li>CloudTrail Lake に外部のサービスのイベントを取り込めるようになりました</li>\n</ul>\n</li>\n<li>また AWS がこの統合機能を使ったサンプルを提供しています\n<ul>\n<li><a href=\"https://github.com/aws-samples/aws-cloudtrail-lake-github-audit-log\">aws-samples/aws-cloudtrail-lake-github-audit-log: A reference architecture to integrate GitHub Audit Log to AWS CloudTrail Lake</a></li>\n<li>S3 にログがアップロードされる度に、そのログデータを CloudTrail Audit Event 形式に変換して CloudTrail に送信します</li>\n</ul>\n</li>\n<li>Athena などで頑張ることなく、ログ解析の基盤を作ることができるので便利そうです</li>\n</ul>\n<h2><a href=\"https://dev.classmethod.jp/articles/vpc-resource-map/\">VPC内のサブネットやルートテーブルなどのリソースを可視化するリソースマップが追加されました | DevelopersIO</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/defaultcf\">@defaultcf</a></p>\n<ul>\n<li>AWS マネージドコンソール上で、VPC 内のサブネットやルートテーブル、NAT Gateway などの関係性を図で確認できるようになりました\n<ul>\n<li><a href=\"https://aws.amazon.com/jp/about-aws/whats-new/2023/02/amazon-vpc-resource-map-aws-management-console/\">Amazon VPC、AWS マネジメントコンソールでのリソースマップの一般提供を発表</a></li>\n</ul>\n</li>\n<li>VPC 作成時に作成するリソースの関係が図で確認できる機能は 2022年3月に GA となっていますが、今回既存のリソースも図で確認できるようになりました</li>\n<li>直感的に関係を把握できるので、誤った接続がされていないかをサクッと調べるのに便利です</li>\n</ul>\n<h2><a href=\"https://efcl.info/2023/01/31/remove-secret-from-local/\">1Passwordを使って、ローカルにファイル(~/.configや.env)として置かれてる生のパスワードなどを削除した | Web Scratch</a></h2>\n<p>共有担当: <a href=\"https://twitter.com/miyajan\">@miyajan</a></p>\n<ul>\n<li>1Password を使ってローカルの生パスワードなどを削除する方法として、以下のような内容が紹介されています\n<ul>\n<li>SSH の秘密鍵を 1Password に移行する方法</li>\n<li>1Password Shell Plugins で <code>gh</code> コマンドや <code>aws</code> コマンドのクレデンシャルを 1Password に移行する方法</li>\n<li>1Password CLI で <code>.env</code> や dotfile に入っているクレデンシャルを 1Password に移行する方法</li>\n</ul>\n</li>\n<li>1Password CLI をうまく使えばローカルに生でクレデンシャルを保存することはほぼなくせそうでいいですね</li>\n<li>記事のまとめにも書かれている通り、クレデンシャルを読み取るプロセスが頻繁に実行される場合に少しわずらわしいのと、セッションみたいな固定じゃないクレデンシャルの扱いをどうしようかなというのは引き続きありますね</li>\n</ul>\n<hr>\n<h1>We are hiring</h1>\n<a href=\"https://note.com/cybozu_dev/n/n1c1b44bf72f6\">\n<img src=\"https://user-images.githubusercontent.com/471182/156986297-b189ef3d-98d3-4490-af5c-007a4ab47e5e.png\" alt=\"サイボウズの開発者の生産性を上げる「生産性向上チーム」とは！？\" width=\"600\">\n</a>\n"}},"__N_SSG":true}